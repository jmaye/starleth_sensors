1. sudo apt-get update
   sudo apt-get upgrade
   sudo apt-get dist-upgrade
   sudo apt-get autoclean
   sudo apt-get autoremove
2. sudo shutdown -r now
3. sudo apt-get install python-software-properties vim htop openssh-server g++ cmake cmake-curses-gui chrony tmux screen software-properties-common
4. sudo add-apt-repository ppa:jmaye/ethz
   sudo add-apt-repository ppa:jmaye/ros
   sudo add-apt-repository ppa:jmaye/starleth
   sudo add-apt-repository ppa:stephane.magnenat/trusty
   sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu trusty main" > /etc/apt/sources.list.d/ros-latest.list'
   wget https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -O - | sudo apt-key add -
   TO BE CHANGED LATER ON TO POINT ON RALF'S PPA
5. sudo apt-get update
   sudo apt-get install velodyne-ros-indigo velodyne-post-ros-indigo xsensmt-ros-indigo starleth-system-monitor-ros-indigo starleth-diagnostics-ros-indigo starleth-sensors-ros-indigo starleth-udev starleth-init ros-indigo-rqt-robot-monitor ros-indigo-rqt-runtime-monitor libnabo-dev
6. sudo apt-get install git
   vi ~/.gitconfig
   add the following:
   [alias]
        co = checkout
        br = branch
        ci = commit
        st = status
7. ssh-keygen
   copy the ~/.ssh/id_rsa.pub content to github, bitbuckets, and whatever
   machine
8. mkdir ~/git
   cd ~/git
   *Misc*
   git clone https://github.com/jmaye/starleth_sensors.git
   *VI-Sensor*
   git clone https://github.com/skybotix/visensor_tools.git
   *Localization and Mapping*
   git clone https://github.com/ethz-asl/libpointmatcher.git
   git clone -b starleth_devel https://github.com/ethz-asl/asrl_navigation.git
   git clone -b starleth_devel https://github.com/remod/vcharge_motion_planning.git
   git clone -b indigo_devel_starleth https://bitbucket.org/ethz-asl-lr/c_ethzasl_icp_mapping.git ethzasl_icp_mapping
   git clone https://github.com/jmaye/starleth_tr.git
   git clone https://github.com/ethz-asl/Schweizer-Messer.git
   git clone https://github.com/catkin/catkin_simple.git
   git clone https://github.com/ethz-asl/eigen_catkin.git
   *Leica*
   git clone https://github.com/ethz-asl/leica_totalstation_interface.git
9. Warning: only do this if you understand the consequences!
   cp ~/git/starleth_sensors/conf/home/starleth/.bashrc ~/
   sudo cp ~/git/starleth_sensors/conf/etc/fstab /etc/
   sudo cp ~/git/starleth_sensors/conf/etc/chrony/chrony.conf.<host> /etc/chrony.conf
   sudo cp ~/git/starleth_sensors/conf/etc/hosts.<host> /etc/hosts
   sudo cp ~/git/starleth_sensors/conf/usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf /usr/share/lightdm/lightdm.conf.d/
   open new terminal
10. create catkin workspace:
    indigo
    sudo rosdep init
    rosdep update
    mkdir -p ~/catkin_ws/src
    cd ~/catkin_ws/src
    catkin_init_workspace
    cd ~/catkin_ws/
    catkin_make
11. cd ~/catkin_ws/src
    ln -s ~/git/Schweizer-Messer/ schweizer-messer
    ln -s ~/git/catkin_simple/ .
    ln -s ~/git/eigen_catkin/ .
    ln -s ~/git/visensor_tools/visensor_calibration_flasher/ .
    ln -s ~/git/ethzasl_icp_mapping/ .
12. cd ~/catkin_ws/
    sudo apt-get install python-catkintools python-rosinstall ros-indigo-camera-info-manager ros-indigo-cv-bridge ros-indigo-pcl-ros ros-indigo-stereo-image-proc ros-indigo-image-view ros-indigo-rqt-image-view ros-indigo-nav-msgs ros-indigo-cmake-modules ros-indigo-rosmake ros-indigo-roslang ros-indigo-mk ros-indigo-turtlesim
    indigo_catkin_ws
    catkin build --merge-devel -DCMAKE_BUILD_TYPE=Release catkin_simple
    catkin build --merge-devel -DCMAKE_BUILD_TYPE=Release eigen_catkin
    catkin build --merge-devel -DCMAKE_BUILD_TYPE=Release sm_eigen
    catkin build --merge-devel -DCMAKE_BUILD_TYPE=Release sm_common
    catkin build --merge-devel -DCMAKE_BUILD_TYPE=Release sm_property_tree
    catkin build --merge-devel -DCMAKE_BUILD_TYPE=Release numpy_eigen
    catkin build --merge-devel -DCMAKE_BUILD_TYPE=Release sm_kinematics
    catkin build --merge-devel -DCMAKE_BUILD_TYPE=Release sm_logging
    catkin build --merge-devel -DCMAKE_BUILD_TYPE=Release visensor_calibration_flasher
13. sudo apt-get install libssh2-1-dev libcurl4-gnutls-dev
    cd ~/git/visensor_tools/visensor_update
    mkdir build
    cd build
    cmake -DCMAKE_BUILD_TYPE=Release ..
    make -j
    cd ~/git/libpointmatcher
    mkdir build
    cd build
    cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
    make -j
    sudo make install
    cd ~/catkin_ws
    catkin_make
14. mkdir ~/rosbuild_ws
    cd ~/rosbuild_ws
    rosws init . ~/catkin_ws/devel
15. indigo_rosbuild_ws
    cd ~/rosbuild_ws
    sudo apt-get install ros-indigo-tf ros-indigo-tf-conversions ros-indigo-eigen-conversions ros-indigo-joy ros-indigo-map-msgs ros-indigo-driver-base libargtable2-dev ros-indigo-rviz ros-indigo-rqt-console ros-indigo-rqt-py-common ros-indigo-sound-play
    ln -s ~/git/asrl_navigation/ .
    ln -s ~/git/vcharge_motion_planning/ .
    ln -s ~/git/starleth_tr/ .
    rosmake starleth_tr
16. T&R:
    indigo_rosbuild_ws
    roslaunch starleth_tr tr_server_icp.launch
    *Teach*:
    rosrun icp_interface createNewPoseGraph <absolute_path>
    rosrun icp_interface transitionToMappingNewGraph 10.0 ->at start
    rosrun icp_interface transitionToIdle 10.0 ->at goal
    *Visualize*:
    roscd asrl_icp_navigation
    mkdir <absolute_path_to_output>
    bin/offlinePointCloudExporter camera <absolute_path_to_pose_graph> <absolute_path_to_output/prefix>
    sudo apt-get install paraview
    load the vtk files in paraview, press the Apply button
    to colorize the point cloud nicely, highlight its entry on the top left, press ctrl+space (new filter), enter "elevation", choose axis and press Apply
    *Repeat*:
    rosrun icp_interface loadExistingPoseGraph <absolute_path_to_pose_graph>
    rosrun icp_interface transitionToFollowingAT <startID> <goadID> 10.0
    rosrun icp_interface transitionToIdle 10.0->at goal
17. VI-sensor:
    *update tools:*
    cd ~/git/visensor_tools/visensor_update/bin
    ./visensor_update <ip> update-devel ->make sure you have Internet connection
    *calibration flasher tool*
    indigo_catkin_ws
    roscore
    rosparam load <path_to_your_camchain_yaml_file>
    rosrun visensor_calibration_flasher visensor_calibration_flasher
    *launch the node*
    rosrun visensor_node visensor_node
    *dynamic reconfigure*
    sudo apt-get install ros-indigo-rqt-reconfigure
    rosrun rqt_reconfigure rqt_reconfigure
    in case of failure: rqt --force-discover
    The parameters which are important for the calibration can be set with
    rosrun dynamic_reconfigure dynparam set /visensor_node "{'cam0_agc_enable': 0, 'cam0_aec_enable': 0, 'cam0_coarse_shutter_width': 20, 'cam0_global_analog_gain': 64}"
    rosrun dynamic_reconfigure dynparam set /visensor_node "{'cam1_agc_enable': 0, 'cam1_aec_enable': 0, 'cam1_coarse_shutter_width': 20, 'cam1_global_analog_gain': 64}"
    *calibration*
    Record 3 static datasets:
    rosbag record /cam0/image_raw /cam1/image_raw -O static1.bag
    rosbag record /cam0/image_raw /cam1/image_raw -O static2.bag
    rosbag record /cam0/image_raw /cam1/image_raw -O static3.bag
    Record 3 dynamic datasets:
    rosbag record /cam0/image_raw /cam1/image_raw /imu0 -O dynamic1.bag
    rosbag record /cam0/image_raw /cam1/image_raw /imu0 -O dynamic2.bag
    rosbag record /cam0/image_raw /cam1/image_raw /imu0 -O dynamic3.bag
    The calibration process is described here:
    https://github.com/ethz-asl/kalibr/wiki
18. Leica:
    indigo
    rosrun leica_interface leica_node.py [options]
    rosrun leica_interface leica_node.py -h    * to get help on the options
19. Primesense 1.08:
    error:
    [26687.769616] usb 2-7: Manufacturer: PrimeSense
    [26687.769865] usb 2-7: Not enough bandwidth for new device state.
    [26687.769872] usb 2-7: can't set config #1, error -28
    Updating firmware makes it work!
    Primesense 1.09:
    ros node does not recognize device
    workaround:
    install https://github.com/OpenNI/OpenNI (tested with Stable-1.5.7.10) and https://github.com/PrimeSense/Sensor (tested with Stable-5.1.6.6).
    Primesense 1.08 and 1.09:
    sudo apt-get install ros-indigo-openni2-launch
    roslaunch openni2_launch openni2.launch depth_registration:=true
    *topics:*
    /camera/depth_registered/camera_info
    /camera/depth_registered/image_raw
    /camera/rgb/camera_info
    /camera/rgb/image_raw
    load_driver:=false->for playback
20. Diagnostics tools:
    rosrun rqt_robot_monitor rqt_robot_monitor
    or
    rosrun rqt_runtime_monitor rqt_runtime_monitor
21. Webcams:
    sudo apt-get install ros-indigo-usb-cam
    rosrun usb_cam usb_cam_node __name:=usb_cam0 _video_device:=/dev/starleth/usb_cam0 _pixel_format:=yuyv _framerate:=15
    rosrun usb_cam usb_cam_node __name:=usb_cam1 _video_device:=/dev/starleth/usb_cam1 _pixel_format:=yuyv _framerate:=15
22. *Chrony*
    *chrony command line*
    chronyc
    password <password> ->from the key file in /etc/chrony/chrony.keys
    makestep
    sources
    sourcestats
    help
    *optional*
    ntpdate -q starleth-hlpc
    sudo ntpdate starleth-hlpc

*NOTE*
- for ssd, run periodically the command: sudo fstrim -v <mount-point>
- modify grub such that it does not hang at bootup (done locally)
- power button does the shutdown (done locally)
- init script for the starleth_tf_publisher (done locally)
- automatic logging from USB stick (done locally)

*TODO*
- diagnostic tools for vi-sensor, T&R, velodyne_post, Kinect
- Timestamp correction Velodyne, Xsens
- Correcting the Velodyne scans w.r.t. pose estimator
- better deployement strategy
- improve the init scripts, one Debian package per computer
